# 迭代器

[视频讲解](https://www.bilibili.com/video/BV18R4y1t7Hg?from=search&seid=11529236006157362178&spm_id_from=333.337.0.0)

[TOC]



## 1.为什么会产生迭代器？

- 在比较**早的编程语言**中，如C语言，并**没有迭代器**这样的东西和概念，那么其遍历**数组和链表**等数据结构只能按照下面的方式遍历

![image-20220302200243619](C:\鲁宇\Typora图片位置\image-20220302200243619.png)

- 每种数据结构的遍历的写法都**不太相同**，书写和阅读起来都不是很方便
- 因此，后面的编程语言如Python，c++，java，想用相同的方法对不同的数据容器进行遍历。因此产生了迭代器。（接下来的部分会详细讲解迭代器）
  - 以python语句为例，以for语句来遍历任何数据容器



## 2.为什么python能够直接使用for遍历数据容器

- 因为这是有迭代器在默默的支持

- **for 循环**在迭代的时候会在**幕后做两件事**

  - ### 第一件事： 调用**这个位置的对象（要遍历的对象，如列表之类）**的`__iter__()`方法。

    - 因此，这里就出现了**可迭代对象**这个概念。只有这个对象包含`__iter__()`方法，他才算是一个可迭代对象，才能被for循环遍历。不然for循环就会报错。
    - ![image-20220302201606922](C:\鲁宇\Typora图片位置\image-20220302201606922.png)
    - ![image-20220302202036559](C:\鲁宇\Typora图片位置\image-20220302202036559.png)

##### <怎么判断一个对象是不是可迭代对象>

1. 查看对象的方法有没有`__iter__()`这个方法。

2. 或者是用一个库中的函数来查看这个对象是否是可迭代对象

   - ```python
     from collections.abc import Iterable
     isinstance(a,Iterable) #第一个参数是想要验证的对象，第二个参数是验证是不是的类型
     ```

     ![image-20220302202858116](C:\鲁宇\Typora图片位置\image-20220302202858116.png)

   - ### 第二件事：把`__iter__()`方法的返回值当成一个对象，并且调用这个对象的`__next__()`方法。

   - 因此，这里就出现了**迭代器**这个概念。如果一个可迭代对象具有`__next__()`方法，那么这个可迭代对象就是一个迭代器



## 3.可迭代对象和迭代器。

> `__iter__()`方法获取一个可迭代对象，`__next__()`方法用来获取容器的下一个元素

- 当一个对象拥有`__iter__()`方法，那么这个对象就是一个可迭代对象。就是`__iter__()`方法和可迭代对象是等价的
- 而当一个可迭代对象有`__next__()`方法，那么它就是一个迭代器。就是说同时具有`__iter__()`和`__next__()`方法就是迭代器

##### <怎么判断一个对象是不是可迭代对象>

- 查看对象的方法有没有`__iter__()`和`__next__()`这个方法。

- 或者是用一个库中的函数来查看这个对象是否是可迭代对象

  - ```python
    from collections.abc import Iterable
    isinstance(a,Iterator)	#第一个参数是想要验证的对象，第二个参数是验证是不是的类型
    ```

    

## 4. 迭代器示例

```python
class Reverse:
    """ 例子:可把字符串反序输出 """
    def __init__(self,data) -> None:
        self.data = data
        self.index = len(data)
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.index == 0:
            raise StopIteration

        self.index = self.index - 1
        return self.data[self.index]
```



# 生成器

就是简化迭代器的实现